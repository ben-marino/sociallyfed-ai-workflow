#!/bin/bash

# update-implementation.sh - Document implementation progress
# This script creates implementation reports and updates the cumulative log

set -euo pipefail

# Configuration
CONTEXT_DIR="${CONTEXT_DIR:-$HOME/Google Drive/SociallyFed/Context}"
PROJECT_DIR="${PROJECT_DIR:-$(pwd)}"
EDITOR="${EDITOR:-code}"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}üìù Creating implementation report...${NC}"

# Generate timestamp and filename
TIMESTAMP=$(date +"%Y-%m-%d-%H%M")
DATE=$(date +"%Y-%m-%d")
TIME=$(date +"%H:%M:%S")
REPORT_FILE="$CONTEXT_DIR/implementation-reports/report-${TIMESTAMP}.md"
CUMULATIVE_LOG="$CONTEXT_DIR/implementation-reports/cumulative-log.md"

# Ensure directory exists
mkdir -p "$CONTEXT_DIR/implementation-reports"

# Function to get test coverage if available
get_test_coverage() {
    local coverage=""
    
    # Check for .NET coverage
    if [ -f "coverage.opencover.xml" ]; then
        # Extract coverage percentage if reportgenerator is available
        if command -v reportgenerator &> /dev/null; then
            coverage=$(reportgenerator -reports:coverage.opencover.xml -targetdir:temp_coverage -reporttypes:TextSummary 2>/dev/null | grep "Line coverage" | grep -oE "[0-9]+\.?[0-9]*%" || echo "")
        fi
    fi
    
    # Check for Jest coverage
    if [ -f "coverage/coverage-summary.json" ]; then
        coverage=$(cat coverage/coverage-summary.json | grep -oE '"pct":[0-9]+\.?[0-9]*' | head -1 | cut -d':' -f2 || echo "")
        [ -n "$coverage" ] && coverage="${coverage}%"
    fi
    
    echo "${coverage:-Not measured}"
}

# Function to count files changed
count_changed_files() {
    if [ -d .git ]; then
        git diff --name-only 2>/dev/null | wc -l || echo "0"
    else
        echo "N/A"
    fi
}

# Function to get current git branch
get_current_branch() {
    if [ -d .git ]; then
        git branch --show-current 2>/dev/null || echo "main"
    else
        echo "N/A"
    fi
}

# Create template for report
cat > "$REPORT_FILE" << EOF
# Implementation Report - $TIMESTAMP

## Session Information
- Date: $DATE
- Time: $TIME
- Branch: $(get_current_branch)
- Files Changed: $(count_changed_files)
- Test Coverage: $(get_test_coverage)

## Completed Tasks

### Feature: [Feature Name]
<!-- Replace with actual feature name -->

**Files Modified:**
- \`path/to/file1.cs\` - Description of changes
- \`path/to/file2.cs\` - Description of changes

**Implementation Details:**
<!-- Describe what was implemented -->

**Tests Added:**
- [ ] Unit tests for [component]
- [ ] Integration tests for [feature]
- [ ] Edge cases covered

**Coverage:** X%

---

### Bug Fix: [Issue #XXX]
<!-- If applicable -->

**Root Cause:**
<!-- Describe the root cause -->

**Solution:**
<!-- Describe the fix -->

**Tests:**
<!-- Tests added to prevent regression -->

---

## Challenges Encountered

<!-- List any challenges and how they were resolved -->
1. Challenge: 
   - Solution: 

## Architectural Decisions

<!-- Document any significant decisions made -->
- Decision: 
  - Rationale: 

## Next Steps

<!-- What needs to be done next -->
1. [ ] Task 1
2. [ ] Task 2
3. [ ] Task 3

## Code Quality Metrics

- Linting: ‚úÖ Pass / ‚ùå Fail
- Build: ‚úÖ Pass / ‚ùå Fail  
- Tests: X passing, X failing
- Performance: [Any notable metrics]

## Time Tracking

- Feature implementation: X hours
- Testing: X hours
- Documentation: X hours
- Total session: X hours

## Notes

<!-- Any additional notes or context -->

---

*Generated by update-implementation.sh*
EOF

# Open in editor for user to fill out
echo -e "${BLUE}üìù Opening report for editing...${NC}"
echo -e "${YELLOW}Please fill out the implementation details in your editor${NC}"

if [ -n "$EDITOR" ] && command -v "$EDITOR" &> /dev/null; then
    "$EDITOR" "$REPORT_FILE"
    
    # Wait for user to close editor
    echo -e "${BLUE}‚è≥ Waiting for editor to close...${NC}"
    echo "Press Enter when done editing..."
    read -r
else
    echo -e "${RED}‚ùå No editor found. Please edit manually:${NC}"
    echo "$REPORT_FILE"
    echo "Press Enter when done editing..."
    read -r
fi

# Extract summary for cumulative log
echo -e "${BLUE}üìä Updating cumulative log...${NC}"

# Initialize cumulative log if it doesn't exist
if [ ! -f "$CUMULATIVE_LOG" ]; then
    cat > "$CUMULATIVE_LOG" << 'EOF'
# Cumulative Implementation Log

This log tracks all implementation progress for the SociallyFed project.

---

EOF
fi

# Function to extract summary from report
extract_summary() {
    local report="$1"
    
    # Extract completed tasks section
    awk '/^## Completed Tasks/,/^## Challenges/' "$report" | head -n -1 || echo "No tasks documented"
}

# Add entry to cumulative log
{
    echo "## $DATE - $TIME"
    echo ""
    echo "Report: \`$(basename "$REPORT_FILE")\`"
    echo ""
    extract_summary "$REPORT_FILE"
    echo ""
    echo "---"
    echo ""
} >> "$CUMULATIVE_LOG"

# Git status summary
if [ -d .git ]; then
    echo -e "${BLUE}üìä Git status summary:${NC}"
    echo "Changed files:"
    git diff --name-only 2>/dev/null | head -10 || echo "  No changes"
    
    echo ""
    echo -e "${YELLOW}Don't forget to commit your changes!${NC}"
    echo "Use: ./push-implementation.sh \"commit message\""
fi

# Calculate session productivity metrics
echo ""
echo -e "${BLUE}üìà Session Metrics:${NC}"
echo "- Report created: ‚úÖ"
echo "- Files changed: $(count_changed_files)"
echo "- Test coverage: $(get_test_coverage)"
echo "- Time: Check your report for time tracking"

echo ""
echo -e "${GREEN}‚úÖ Implementation report created successfully!${NC}"
echo -e "${BLUE}üìÑ Report: $REPORT_FILE${NC}"
echo -e "${BLUE}üìä Cumulative log: $CUMULATIVE_LOG${NC}"

# Remind about next steps
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Review the report for completeness"
echo "2. Commit your changes if ready"
echo "3. Continue with next task or end session"
echo ""
echo -e "${GREEN}Keep up the great work! üí™${NC}"