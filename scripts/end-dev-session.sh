#!/bin/bash

# end-dev-session.sh - Wrap up development session
# This script creates a session summary and prepares for the next session

set -euo pipefail

# Configuration
CONTEXT_DIR="${CONTEXT_DIR:-$HOME/Google Drive/SociallyFed/Context}"
PROJECT_DIR="${PROJECT_DIR:-$(pwd)}"
EDITOR="${EDITOR:-code}"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}üåô Ending development session...${NC}"

# Navigate to project directory
cd "$PROJECT_DIR" || {
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Could not navigate to project directory${NC}"
}

# Generate timestamps
DATE=$(date +%Y-%m-%d)
TIME=$(date +%H:%M:%S)
SESSION_FILE="$CONTEXT_DIR/daily-briefs/session-summary-${DATE}.md"

# Function to calculate session duration
calculate_duration() {
    local brief_file="$CONTEXT_DIR/daily-briefs/daily-brief-${DATE}.md"
    if [ -f "$brief_file" ]; then
        local start_time=$(grep "Generated at:" "$brief_file" | cut -d' ' -f3 || echo "")
        if [ -n "$start_time" ]; then
            local start_seconds=$(date -d "$start_time" +%s 2>/dev/null || echo "0")
            local end_seconds=$(date +%s)
            local duration=$((end_seconds - start_seconds))
            local hours=$((duration / 3600))
            local minutes=$(((duration % 3600) / 60))
            echo "${hours}h ${minutes}m"
        else
            echo "Unknown"
        fi
    else
        echo "Unknown"
    fi
}

# Function to count commits made today
count_todays_commits() {
    if [ -d .git ]; then
        git log --since="$DATE 00:00:00" --until="$DATE 23:59:59" --oneline 2>/dev/null | wc -l || echo "0"
    else
        echo "0"
    fi
}

# Function to list files changed today
list_changed_files() {
    if [ -d .git ]; then
        git diff --name-only $(git log --since="$DATE 00:00:00" --until="$DATE 23:59:59" --format="%H" | tail -1 2>/dev/null || echo "HEAD")...HEAD 2>/dev/null || echo "No files changed"
    else
        echo "Git not initialized"
    fi
}

# Function to get implementation report count
count_reports() {
    local report_dir="$CONTEXT_DIR/implementation-reports"
    if [ -d "$report_dir" ]; then
        find "$report_dir" -name "report-${DATE}-*.md" -type f 2>/dev/null | wc -l || echo "0"
    else
        echo "0"
    fi
}

# Function to extract completed tasks
extract_completed_tasks() {
    local cumulative_log="$CONTEXT_DIR/implementation-reports/cumulative-log.md"
    if [ -f "$cumulative_log" ]; then
        # Get today's entries
        awk -v date="$DATE" '
            $0 ~ "## " date {found=1; next}
            /^## [0-9]{4}-[0-9]{2}-[0-9]{2}/ && found {exit}
            found && /^###/ {print "- " $0}
            found && /^- / {print "  " $0}
        ' "$cumulative_log" 2>/dev/null || echo "No tasks logged"
    else
        echo "No cumulative log found"
    fi
}

# Function to check uncommitted changes
check_uncommitted() {
    if [ -d .git ]; then
        local changes=$(git status --porcelain 2>/dev/null | wc -l)
        if [ "$changes" -gt 0 ]; then
            echo "‚ö†Ô∏è  Warning: $changes uncommitted changes"
            echo ""
            echo "Uncommitted files:"
            git status --short
        else
            echo "‚úÖ All changes committed"
        fi
    fi
}

# Create session summary
cat > "$SESSION_FILE" << EOF
# Development Session Summary - $DATE

Session ended at: $TIME
Duration: $(calculate_duration)

## üìä Session Metrics

- Commits made: $(count_todays_commits)
- Implementation reports: $(count_reports)
- Files changed: $(echo "$(list_changed_files)" | wc -l)

## ‚úÖ Completed Today

$(extract_completed_tasks)

## üìù Files Modified

\`\`\`
$(list_changed_files)
\`\`\`

## üîç Git Status

$(check_uncommitted)

## üí° Key Achievements

<!-- Manually add key achievements -->
1. 
2. 
3. 

## üöß In Progress

<!-- What's still in progress -->
1. 
2. 

## üìÖ For Tomorrow

<!-- Priority items for next session -->
1. [ ] 
2. [ ] 
3. [ ] 

## üìì Notes & Reflections

<!-- Any thoughts about today's session -->

## üîó Relevant Links

- Cumulative Log: cumulative-log.md
- Today's Brief: daily-brief-${DATE}.md

---

*Generated by end-dev-session.sh*
EOF

echo -e "${GREEN}‚úÖ Session summary created!${NC}"
echo -e "${BLUE}üìÑ Summary: $SESSION_FILE${NC}"

# Open for editing
if [ -n "$EDITOR" ] && command -v "$EDITOR" &> /dev/null; then
    echo -e "${BLUE}üìù Opening summary for your notes...${NC}"
    "$EDITOR" "$SESSION_FILE" &
    
    echo "Add any achievements, reflections, or notes for tomorrow."
    echo "Press Enter when done..."
    read -r
fi

# Check for uncommitted changes
echo ""
echo -e "${BLUE}üîç Final checks...${NC}"

if [ -d .git ]; then
    UNCOMMITTED=$(git status --porcelain 2>/dev/null | wc -l)
    if [ "$UNCOMMITTED" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  You have $UNCOMMITTED uncommitted changes${NC}"
        echo ""
        echo -e "${YELLOW}Commit them now? (y/n)${NC}"
        read -r -n 1 COMMIT_NOW
        echo ""
        
        if [[ "$COMMIT_NOW" =~ ^[Yy]$ ]]; then
            echo "Enter commit message:"
            read -r COMMIT_MSG
            git add -A
            git commit -m "End of session: $COMMIT_MSG"
            echo -e "${GREEN}‚úÖ Changes committed${NC}"
        else
            echo -e "${YELLOW}Remember to commit your changes before starting tomorrow${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ All changes are committed${NC}"
    fi
fi

# Create tomorrow's setup file
TOMORROW=$(date -d "tomorrow" +%Y-%m-%d 2>/dev/null || date -v+1d +%Y-%m-%d 2>/dev/null || echo "")
if [ -n "$TOMORROW" ]; then
    TOMORROW_SETUP="$CONTEXT_DIR/daily-briefs/setup-${TOMORROW}.md"
    
    cat > "$TOMORROW_SETUP" << EOF
# Setup for $TOMORROW

## üéØ Priorities
$(grep -A 10 "## üìÖ For Tomorrow" "$SESSION_FILE" | tail -n +2 | head -n 10)

## üöß Continue From
$(grep -A 10 "## üöß In Progress" "$SESSION_FILE" | tail -n +2 | head -n 10)

## üìù Context
- Previous session: session-summary-${DATE}.md
- Review cumulative log before starting

---

*Prepared by end-dev-session.sh*
EOF
    
    echo -e "${BLUE}üìÖ Created setup file for tomorrow${NC}"
fi

# Sync status
echo ""
echo -e "${BLUE}‚òÅÔ∏è  Checking sync status...${NC}"
if [ -d "$CONTEXT_DIR" ]; then
    # Simple check if directory is accessible
    if touch "$CONTEXT_DIR/.sync_check" 2>/dev/null; then
        rm "$CONTEXT_DIR/.sync_check"
        echo -e "${GREEN}‚úÖ Context directory is accessible and syncing${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Cannot write to context directory. Check Google Drive sync.${NC}"
    fi
fi

# Session statistics
echo ""
echo -e "${BLUE}üìà Session Statistics:${NC}"
echo "- Duration: $(calculate_duration)"
echo "- Commits: $(count_todays_commits)"
echo "- Reports: $(count_reports)"
echo "- Files changed: $(echo "$(list_changed_files)" | wc -l)"

# Productivity tip
echo ""
echo -e "${BLUE}üí° Productivity Tip:${NC}"
TIPS=(
    "Review today's commits to refresh your memory tomorrow"
    "Clean up any TODO comments you've resolved"
    "Update documentation while it's fresh in your mind"
    "Consider writing a blog post about what you learned"
    "Take a moment to celebrate your progress!"
)
TIP_INDEX=$((RANDOM % ${#TIPS[@]}))
echo "${TIPS[$TIP_INDEX]}"

echo ""
echo -e "${GREEN}üéâ Great work today! Session ended successfully.${NC}"
echo -e "${BLUE}See you tomorrow! Get some rest. üò¥${NC}"
echo ""

# Final reminder
if [ -n "$TOMORROW_SETUP" ]; then
    echo -e "${YELLOW}Tomorrow: Run ${GREEN}./start-dev-session.sh${YELLOW} to begin${NC}"
fi